//
//  Microsoft Windows Media Technologies
//  Copyright (c) Microsoft Corporation. All rights reserved.
//

import "unknwn.idl";
import "objidl.idl";
import "ocidl.idl";
import "wtypes.idl";
import "propidl.idl";

cpp_quote("#ifndef _DEFINE_WMDM_DEVICE_PROTOCOL_MTP")
cpp_quote("#define _DEFINE_WMDM_DEVICE_PROTOCOL_MTP")
cpp_quote("// {979E54E5-0AFC-4604-8D93-DC798A4BCF45}")
cpp_quote("DEFINE_GUID(WMDM_DEVICE_PROTOCOL_MTP,")
cpp_quote("0x979e54e5, 0xafc, 0x4604, 0x8d, 0x93, 0xdc, 0x79, 0x8a, 0x4b, 0xcf, 0x45);")
cpp_quote("#endif")

cpp_quote("#ifndef _DEFINE_WMDM_DEVICE_PROTOCOL_RAPI")
cpp_quote("#define _DEFINE_WMDM_DEVICE_PROTOCOL_RAPI")
cpp_quote("// {2A11ED91-8C8F-41e4-82D1-8386E003561C}")
cpp_quote("DEFINE_GUID(WMDM_DEVICE_PROTOCOL_RAPI,")
cpp_quote("0x2a11ed91, 0x8c8f, 0x41e4, 0x82, 0xd1, 0x83, 0x86, 0xe0, 0x3, 0x56, 0x1c);")
cpp_quote("#endif")

cpp_quote("#ifndef _DEFINE_WMDM_DEVICE_PROTOCOL_MSC")
cpp_quote("#define _DEFINE_WMDM_DEVICE_PROTOCOL_MSC")
cpp_quote("// {A4D2C26C-A881-44bb-BD5D-1F703C71F7A9}")
cpp_quote("DEFINE_GUID(WMDM_DEVICE_PROTOCOL_MSC,")
cpp_quote("0xa4d2c26c, 0xa881, 0x44bb, 0xbd, 0x5d, 0x1f, 0x70, 0x3c, 0x71, 0xf7, 0xa9);")
cpp_quote("#endif")

cpp_quote("#ifndef _DEFINE_WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT")
cpp_quote("#define _DEFINE_WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT")
cpp_quote("// {7DE8686D-78EE-43ea-A496-C625AC91CC5D}")
cpp_quote("DEFINE_GUID(WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT,")
cpp_quote("0x7de8686d, 0x78ee, 0x43ea, 0xa4, 0x96, 0xc6, 0x25, 0xac, 0x91, 0xcc, 0x5d);")
cpp_quote("#endif")

typedef enum tagWMDM_TAG_DATATYPE
{

    WMDM_TYPE_DWORD   =  0, //corresponds to DWORD
    WMDM_TYPE_STRING  =  1, //corresponds to LPCWSTR
    WMDM_TYPE_BINARY  =  2, //corresponds to LPBYTE
    WMDM_TYPE_BOOL    =  3, //corresponds to BOOL
    WMDM_TYPE_QWORD   =  4, //corresponds to QWORD
    WMDM_TYPE_WORD    =  5, //corresponds to WORD
    WMDM_TYPE_GUID    =  6, //corresponds to GUID
    WMDM_TYPE_DATE    =  7, //corresponds to WMDMDATE
} WMDM_TAG_DATATYPE;

typedef enum tagWMDM_SESSION_TYPE
{
    WMDM_SESSION_NONE                   =  0x0000,
    WMDM_SESSION_TRANSFER_TO_DEVICE     =  0x0001, 
    WMDM_SESSION_TRANSFER_FROM_DEVICE   =  0x0010,
    WMDM_SESSION_DELETE                 =  0x0100,
    WMDM_SESSION_CUSTOM                 =  0x1000,
} WMDM_SESSION_TYPE;
   

typedef struct _tWAVEFORMATEX
{
    WORD    wFormatTag;        /* format type */
    WORD    nChannels;         /* number of channels (i.e. mono, stereo...) */
    DWORD   nSamplesPerSec;    /* sample rate */
    DWORD   nAvgBytesPerSec;   /* for buffer estimation */
    WORD    nBlockAlign;       /* block size of data */
    WORD    wBitsPerSample;    /* Number of bits per sample of mono data */
    WORD    cbSize;            /* The count in bytes of the size of
                                    extra information (after cbSize) */

} _WAVEFORMATEX;

typedef struct _tagBITMAPINFOHEADER
{
  DWORD  biSize; 
  LONG   biWidth; 
  LONG   biHeight; 
  WORD   biPlanes; 
  WORD   biBitCount; 
  DWORD  biCompression; 
  DWORD  biSizeImage; 
  LONG   biXPelsPerMeter; 
  LONG   biYPelsPerMeter; 
  DWORD  biClrUsed; 
  DWORD  biClrImportant; 
} _BITMAPINFOHEADER; 

typedef struct _tagVIDEOINFOHEADER{
    RECT  rcSource;
    RECT  rcTarget;
    DWORD  dwBitRate;
    DWORD  dwBitErrorRate;
    LONGLONG  AvgTimePerFrame;
    _BITMAPINFOHEADER  bmiHeader;
} _VIDEOINFOHEADER;

typedef struct _tagWMFILECAPABILITIES
{ 
    LPWSTR  pwszMimeType;   // Mime type
    DWORD   dwReserved;     // Recerved for future use - Should be 0 for now.
} WMFILECAPABILITIES;


typedef struct __OPAQUECOMMAND
{
    GUID guidCommand;
    DWORD dwDataLen;
    [size_is(dwDataLen)]BYTE *pData;
    BYTE abMAC[20];
} OPAQUECOMMAND;

const DWORD WMDMID_LENGTH = 128;

typedef struct __WMDMID
{
    UINT cbSize;
    DWORD dwVendorID;
    BYTE pID[WMDMID_LENGTH];
    UINT SerialNumberLength;
} WMDMID, *PWMDMID;

typedef struct _WMDMDATETIME {
    WORD wYear; 
    WORD wMonth; 
    WORD wDay; 
    WORD wHour; 
    WORD wMinute; 
    WORD wSecond; 
} WMDMDATETIME, *PWMDMDATETIME; 

typedef struct __WMDMRIGHTS
{
    UINT cbSize;
    DWORD dwContentType;
    DWORD fuFlags;
    DWORD fuRights;
    DWORD dwAppSec;
    DWORD dwPlaybackCount;
    WMDMDATETIME ExpirationDate;
} WMDMRIGHTS, *PWMDMRIGHTS;

typedef struct __WMDMMetadataView
{
    [string] WCHAR * pwszViewName;
    UINT nDepth;
    [string, size_is(nDepth)] WCHAR ** ppwszTags;
} WMDMMetadataView;

typedef enum tagWMDM_STORAGE_ENUM_MODE
{
    ENUM_MODE_RAW, //enumerate storages as organized on the physical storage
    ENUM_MODE_USE_DEVICE_PREF, //use default metadata views if device indicates
    ENUM_MODE_METADATA_VIEWS //use default organization of storgaes based on metadata
} WMDM_STORAGE_ENUM_MODE;

//
// v1_enum attribute makes sure that 32-bit values can be handled (as opposed to 16-bit default)
//
typedef [v1_enum] enum tagWMDM_FORMATCODE
{
    WMDM_FORMATCODE_NOTUSED                      = 0x0000,
    WMDM_FORMATCODE_ALLIMAGES                    = 0xFFFFFFFF,
    WMDM_FORMATCODE_UNDEFINED                    = 0x3000,
    WMDM_FORMATCODE_ASSOCIATION                  = 0x3001,
    WMDM_FORMATCODE_SCRIPT                       = 0x3002,
    WMDM_FORMATCODE_EXECUTABLE                   = 0x3003,
    WMDM_FORMATCODE_TEXT                         = 0x3004,
    WMDM_FORMATCODE_HTML                         = 0x3005,
    WMDM_FORMATCODE_DPOF                         = 0x3006,
    WMDM_FORMATCODE_AIFF                         = 0x3007,
    WMDM_FORMATCODE_WAVE                         = 0x3008,
    WMDM_FORMATCODE_MP3                          = 0x3009,
    WMDM_FORMATCODE_AVI                          = 0x300A,
    WMDM_FORMATCODE_MPEG                         = 0x300B,
    WMDM_FORMATCODE_ASF                          = 0x300C,
    WMDM_FORMATCODE_RESERVED_FIRST               = 0x300D,
    WMDM_FORMATCODE_RESERVED_LAST                = 0x37FF,

    WMDM_FORMATCODE_IMAGE_UNDEFINED              = 0x3800,
    WMDM_FORMATCODE_IMAGE_EXIF                   = 0x3801,
    WMDM_FORMATCODE_IMAGE_TIFFEP                 = 0x3802,
    WMDM_FORMATCODE_IMAGE_FLASHPIX               = 0x3803,
    WMDM_FORMATCODE_IMAGE_BMP                    = 0x3804,
    WMDM_FORMATCODE_IMAGE_CIFF                   = 0x3805,
    WMDM_FORMATCODE_IMAGE_GIF                    = 0x3807,
    WMDM_FORMATCODE_IMAGE_JFIF                   = 0x3808,
    WMDM_FORMATCODE_IMAGE_PCD                    = 0x3809,
    WMDM_FORMATCODE_IMAGE_PICT                   = 0x380A,
    WMDM_FORMATCODE_IMAGE_PNG                    = 0x380B,
    WMDM_FORMATCODE_IMAGE_TIFF                   = 0x380D,
    WMDM_FORMATCODE_IMAGE_TIFFIT                 = 0x380E,
    WMDM_FORMATCODE_IMAGE_JP2                    = 0x380F,
    WMDM_FORMATCODE_IMAGE_JPX                    = 0x3810,
    WMDM_FORMATCODE_IMAGE_RESERVED_FIRST         = 0x3811,
    WMDM_FORMATCODE_IMAGE_RESERVED_LAST          = 0x3FFF,

    WMDM_FORMATCODE_UNDEFINEDFIRMWARE            = 0xB802,
    WMDM_FORMATCODE_WINDOWSIMAGEFORMAT           = 0xB881,
    WMDM_FORMATCODE_UNDEFINEDAUDIO               = 0xB900,
    WMDM_FORMATCODE_WMA                          = 0xB901,
    WMDM_FORMATCODE_UNDEFINEDVIDEO               = 0xB980,
    WMDM_FORMATCODE_WMV                          = 0xB981,
    WMDM_FORMATCODE_UNDEFINEDCOLLECTION          = 0xBA00,
    WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM      = 0xBA01,
    WMDM_FORMATCODE_ABSTRACTIMAGEALBUM           = 0xBA02,
    WMDM_FORMATCODE_ABSTRACTAUDIOALBUM           = 0xBA03,
    WMDM_FORMATCODE_ABSTRACTVIDEOALBUM           = 0xBA04,
    WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST   = 0xBA05,
    WMDM_FORMATCODE_ABSTRACTCONTACTGROUP         = 0xBA06,
    WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER        = 0xBA07,
    WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION  = 0xBA08,
    WMDM_FORMATCODE_WPLPLAYLIST                  = 0xBA10,
    WMDM_FORMATCODE_M3UPLAYLIST                  = 0xBA11,
    WMDM_FORMATCODE_MPLPLAYLIST                  = 0xBA12,
    WMDM_FORMATCODE_ASXPLAYLIST                  = 0xBA13,
    WMDM_FORMATCODE_PLSPLAYLIST                  = 0xBA14,
    WMDM_FORMATCODE_UNDEFINEDDOCUMENT            = 0xBA80,
    WMDM_FORMATCODE_ABSTRACTDOCUMENT             = 0xBA81,
    WMDM_FORMATCODE_UNDEFINEDMESSAGE             = 0xBB00,
    WMDM_FORMATCODE_ABSTRACTMESSAGE              = 0xBB01,
    WMDM_FORMATCODE_UNDEFINEDCONTACT             = 0xBB80,
    WMDM_FORMATCODE_ABSTRACTCONTACT              = 0xBB81,
    WMDM_FORMATCODE_VCARD2                       = 0xBB82,
    WMDM_FORMATCODE_VCARD3                       = 0xBB83,
    WMDM_FORMATCODE_UNDEFINEDCALENDARITEM        = 0xBE00,
    WMDM_FORMATCODE_ABSTRACTCALENDARITEM         = 0xBE01,
    WMDM_FORMATCODE_VCALENDAR1                   = 0xBE02,
    WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE   = 0xBE80
} WMDM_FORMATCODE;

//
//If a new enum-value is added here, please update WMDM_PROP_DESC as well to handle that enum-value
//
typedef [v1_enum] enum _WMDM_ENUM_PROP_VALID_VALUES_FORM
{
    WMDM_ENUM_PROP_VALID_VALUES_ANY,
    WMDM_ENUM_PROP_VALID_VALUES_RANGE,
    WMDM_ENUM_PROP_VALID_VALUES_ENUM
} WMDM_ENUM_PROP_VALID_VALUES_FORM;

typedef struct _WMDM_PROP_VALUES_RANGE
{
    PROPVARIANT rangeMin;
    PROPVARIANT rangeMax;
    PROPVARIANT rangeStep;
} WMDM_PROP_VALUES_RANGE;

typedef struct _WMDM_PROP_VALUES_ENUM
{
    UINT cEnumValues;
    [size_is(cEnumValues)] PROPVARIANT * pValues;
} WMDM_PROP_VALUES_ENUM;

typedef struct _WMDM_PROP_DESC
{
    LPWSTR pwszPropName;
    WMDM_ENUM_PROP_VALID_VALUES_FORM ValidValuesForm;

    [switch_type(WMDM_ENUM_PROP_VALID_VALUES_FORM)] [switch_is(ValidValuesForm)] union
    {
        [case (WMDM_ENUM_PROP_VALID_VALUES_ANY)]
            ;
        
        [case (WMDM_ENUM_PROP_VALID_VALUES_RANGE)]
            WMDM_PROP_VALUES_RANGE ValidValuesRange;
        
        [case (WMDM_ENUM_PROP_VALID_VALUES_ENUM)]
            WMDM_PROP_VALUES_ENUM EnumeratedValidValues;
        
    } ValidValues;
    
} WMDM_PROP_DESC;

typedef struct _WMDM_PROP_CONFIG
{
    UINT nPreference;
    UINT nPropDesc;
    [size_is(nPropDesc)] WMDM_PROP_DESC * pPropDesc;
} WMDM_PROP_CONFIG;

typedef struct _WMDM_FORMAT_CAPABILITY
{
    UINT nPropConfig;
    [size_is(nPropConfig)] WMDM_PROP_CONFIG * pConfigs;
} WMDM_FORMAT_CAPABILITY;

const DWORD WMDM_MAC_LENGTH = 8;

typedef enum tagWMDM_FIND_SCOPE
{
    WMDM_FIND_SCOPE_GLOBAL,
    WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN        
} WMDM_FIND_SCOPE;

cpp_quote("// WMDM HRESULTS")

cpp_quote("//")
cpp_quote("//Success codes")
cpp_quote("//")

cpp_quote("#define WMDM_S_NOT_ALL_PROPERTIES_APPLIED       0x00045001L")
cpp_quote("#define WMDM_S_NOT_ALL_PROPERTIES_RETRIEVED     0x00045002L")

cpp_quote("//")
cpp_quote("//Error codes")
cpp_quote("//")

cpp_quote("#define WMDM_E_BUSY                             0x80045000L")
cpp_quote("#define WMDM_E_INTERFACEDEAD                    0x80045001L")
cpp_quote("#define WMDM_E_INVALIDTYPE                      0x80045002L")
cpp_quote("#define WMDM_E_PROCESSFAILED                    0x80045003L")
cpp_quote("#define WMDM_E_NOTSUPPORTED                     0x80045004L")
cpp_quote("#define WMDM_E_NOTCERTIFIED                     0x80045005L")
cpp_quote("#define WMDM_E_NORIGHTS                         0x80045006L")
cpp_quote("#define WMDM_E_CALL_OUT_OF_SEQUENCE             0x80045007L")
cpp_quote("#define WMDM_E_BUFFERTOOSMALL                   0x80045008L")
cpp_quote("#define WMDM_E_MOREDATA                         0x80045009L")
cpp_quote("#define WMDM_E_MAC_CHECK_FAILED                 0x8004500AL")
cpp_quote("#define WMDM_E_USER_CANCELLED                   0x8004500BL")
cpp_quote("#define WMDM_E_SDMI_TRIGGER                     0x8004500CL")
cpp_quote("#define WMDM_E_SDMI_NOMORECOPIES                0x8004500DL")
cpp_quote("#define WMDM_E_REVOKED                          0x8004500EL")
cpp_quote("#define WMDM_E_LICENSE_NOTEXIST                 0x8004500FL")
cpp_quote("#define WMDM_E_INCORRECT_APPSEC                 0x80045010L")
cpp_quote("#define WMDM_E_INCORRECT_RIGHTS                 0x80045011L")
cpp_quote("#define WMDM_E_LICENSE_EXPIRED                  0x80045012L")
cpp_quote("#define WMDM_E_CANTOPEN_PMSN_SERVICE_PIPE       0x80045013L")
cpp_quote("#define WMDM_E_TOO_MANY_SESSIONS                0x80045013L")


cpp_quote("// Revocation Flags")
cpp_quote("#define WMDM_WMDM_REVOKED                       0x00000001")
cpp_quote("#define WMDM_APP_REVOKED                        0x00000002")
cpp_quote("#define WMDM_SP_REVOKED                         0x00000004")
cpp_quote("#define WMDM_SCP_REVOKED                        0x00000008")

cpp_quote("// GetFormatSupport2 Flags")
cpp_quote("#define WMDM_GET_FORMAT_SUPPORT_AUDIO           0x00000001")
cpp_quote("#define WMDM_GET_FORMAT_SUPPORT_VIDEO           0x00000002")
cpp_quote("#define WMDM_GET_FORMAT_SUPPORT_FILE            0x00000004")

cpp_quote("// MDMRIGHTS Flags")
cpp_quote("#define WMDM_RIGHTS_PLAYBACKCOUNT               0x00000001")
cpp_quote("#define WMDM_RIGHTS_EXPIRATIONDATE              0x00000002")
cpp_quote("#define WMDM_RIGHTS_GROUPID                     0x00000004")
cpp_quote("#define WMDM_RIGHTS_FREESERIALIDS               0x00000008")
cpp_quote("#define WMDM_RIGHTS_NAMEDSERIALIDS              0x00000010")
    
cpp_quote("// Device Type Flags")
cpp_quote("#define WMDM_DEVICE_TYPE_PLAYBACK               0x00000001")
cpp_quote("#define WMDM_DEVICE_TYPE_RECORD                 0x00000002")
cpp_quote("#define WMDM_DEVICE_TYPE_DECODE                 0x00000004")
cpp_quote("#define WMDM_DEVICE_TYPE_ENCODE                 0x00000008")
cpp_quote("#define WMDM_DEVICE_TYPE_STORAGE                0x00000010")
cpp_quote("#define WMDM_DEVICE_TYPE_VIRTUAL                0x00000020")
cpp_quote("#define WMDM_DEVICE_TYPE_SDMI                   0x00000040")
cpp_quote("#define WMDM_DEVICE_TYPE_NONSDMI                0x00000080")
cpp_quote("#define WMDM_DEVICE_TYPE_NONREENTRANT           0x00000100")
cpp_quote("#define WMDM_DEVICE_TYPE_FILELISTRESYNC         0x00000200")
cpp_quote("#define WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW 0x00000400")

cpp_quote("// Device Power Source Flags")
cpp_quote("#define WMDM_POWER_CAP_BATTERY                  0x00000001")
cpp_quote("#define WMDM_POWER_CAP_EXTERNAL                 0x00000002")
cpp_quote("#define WMDM_POWER_IS_BATTERY                   0x00000004")
cpp_quote("#define WMDM_POWER_IS_EXTERNAL                  0x00000008")
cpp_quote("#define WMDM_POWER_PERCENT_AVAILABLE            0x00000010")

cpp_quote("// Device Status Flags")
cpp_quote("#define WMDM_STATUS_READY                       0x00000001")
cpp_quote("#define WMDM_STATUS_BUSY                        0x00000002")
cpp_quote("#define WMDM_STATUS_DEVICE_NOTPRESENT           0x00000004")
cpp_quote("#define WMDM_STATUS_DEVICECONTROL_PLAYING       0x00000008")
cpp_quote("#define WMDM_STATUS_DEVICECONTROL_RECORDING     0x00000010")
cpp_quote("#define WMDM_STATUS_DEVICECONTROL_PAUSED        0x00000020")
cpp_quote("#define WMDM_STATUS_DEVICECONTROL_REMOTE        0x00000040")
cpp_quote("#define WMDM_STATUS_DEVICECONTROL_STREAM        0x00000080")
cpp_quote("#define WMDM_STATUS_STORAGE_NOTPRESENT          0x00000100")
cpp_quote("#define WMDM_STATUS_STORAGE_INITIALIZING        0x00000200")
cpp_quote("#define WMDM_STATUS_STORAGE_BROKEN              0x00000400")
cpp_quote("#define WMDM_STATUS_STORAGE_NOTSUPPORTED        0x00000800")
cpp_quote("#define WMDM_STATUS_STORAGE_UNFORMATTED         0x00001000")
cpp_quote("#define WMDM_STATUS_STORAGECONTROL_INSERTING    0x00002000")
cpp_quote("#define WMDM_STATUS_STORAGECONTROL_DELETING     0x00004000")
cpp_quote("#define WMDM_STATUS_STORAGECONTROL_APPENDING    0x00008000")
cpp_quote("#define WMDM_STATUS_STORAGECONTROL_MOVING       0x00010000")
cpp_quote("#define WMDM_STATUS_STORAGECONTROL_READING      0x00020000")

cpp_quote("// Device Capabilities Flags")
cpp_quote("#define WMDM_DEVICECAP_CANPLAY                  0x00000001")
cpp_quote("#define WMDM_DEVICECAP_CANSTREAMPLAY            0x00000002")
cpp_quote("#define WMDM_DEVICECAP_CANRECORD                0x00000004")
cpp_quote("#define WMDM_DEVICECAP_CANSTREAMRECORD          0x00000008")
cpp_quote("#define WMDM_DEVICECAP_CANPAUSE                 0x00000010")
cpp_quote("#define WMDM_DEVICECAP_CANRESUME                0x00000020")
cpp_quote("#define WMDM_DEVICECAP_CANSTOP                  0x00000040")
cpp_quote("#define WMDM_DEVICECAP_CANSEEK                  0x00000080")
cpp_quote("#define WMDM_DEVICECAP_HASSECURECLOCK           0x00000100")

cpp_quote("// WMDM Seek Flags")
cpp_quote("#define WMDM_SEEK_REMOTECONTROL                 0x00000001")
cpp_quote("#define WMDM_SEEK_STREAMINGAUDIO                0x00000002")

cpp_quote("// Storage Attributes Flags")
cpp_quote("#define WMDM_STORAGE_ATTR_FILESYSTEM            0x00000001")
cpp_quote("#define WMDM_STORAGE_ATTR_REMOVABLE             0x00000002")
cpp_quote("#define WMDM_STORAGE_ATTR_NONREMOVABLE          0x00000004")
cpp_quote("#define WMDM_FILE_ATTR_FOLDER                   0x00000008")
cpp_quote("#define WMDM_FILE_ATTR_LINK                     0x00000010")
cpp_quote("#define WMDM_FILE_ATTR_FILE                     0x00000020")
cpp_quote("#define WMDM_FILE_ATTR_VIDEO                    0x00000040")
cpp_quote("#define WMDM_STORAGE_ATTR_CANEDITMETADATA       0x00000080")
cpp_quote("#define WMDM_STORAGE_ATTR_FOLDERS               0x00000100")
// These flag are defined below but can be used with this group of flags also
//cpp_quote("#define WMDM_STORAGECONTROL_INSERTBEFORE        0x00000200")
//cpp_quote("#define WMDM_STORAGECONTROL_INSERTAFTER         0x00000400")
//cpp_quote("#define WMDM_STORAGECONTROL_INSERTINTO          0x00000800")
cpp_quote("#define WMDM_FILE_ATTR_AUDIO                    0x00001000")
cpp_quote("#define WMDM_FILE_ATTR_DATA                     0x00002000")
cpp_quote("#define WMDM_FILE_ATTR_CANPLAY                  0x00004000")
cpp_quote("#define WMDM_FILE_ATTR_CANDELETE                0x00008000")
cpp_quote("#define WMDM_FILE_ATTR_CANMOVE                  0x00010000")
cpp_quote("#define WMDM_FILE_ATTR_CANRENAME                0x00020000")
cpp_quote("#define WMDM_FILE_ATTR_CANREAD                  0x00040000")
cpp_quote("#define WMDM_FILE_ATTR_MUSIC                    0x00080000")
cpp_quote("#define WMDM_FILE_CREATE_OVERWRITE              0x00100000")
cpp_quote("#define WMDM_FILE_ATTR_AUDIOBOOK                0x00200000")
cpp_quote("#define WMDM_FILE_ATTR_HIDDEN                   0x00400000")
cpp_quote("#define WMDM_FILE_ATTR_SYSTEM                   0x00800000")
cpp_quote("#define WMDM_FILE_ATTR_READONLY                 0x01000000")
cpp_quote("#define WMDM_STORAGE_ATTR_HAS_FOLDERS           0x02000000")
cpp_quote("#define WMDM_STORAGE_ATTR_HAS_FILES             0x04000000")
cpp_quote("#define WMDM_STORAGE_IS_DEFAULT                 0x08000000")
cpp_quote("#define WMDM_STORAGE_CONTAINS_DEFAULT           0x10000000")
cpp_quote("#define WMDM_STORAGE_ATTR_VIRTUAL               0x20000000")

cpp_quote("// Storage Capabilities Flags")
cpp_quote("#define WMDM_STORAGECAP_FOLDERSINROOT           0x00000001")
cpp_quote("#define WMDM_STORAGECAP_FILESINROOT             0x00000002")
cpp_quote("#define WMDM_STORAGECAP_FOLDERSINFOLDERS        0x00000004")
cpp_quote("#define WMDM_STORAGECAP_FILESINFOLDERS          0x00000008")
cpp_quote("#define WMDM_STORAGECAP_FOLDERLIMITEXISTS       0x00000010")
cpp_quote("#define WMDM_STORAGECAP_FILELIMITEXISTS         0x00000020")
cpp_quote("#define WMDM_STORAGECAP_NOT_INITIALIZABLE       0x00000040") //by default top-level storage is formattable

cpp_quote("// WMDM Mode Flags")
cpp_quote("#define WMDM_MODE_BLOCK                         0x00000001")
cpp_quote("#define WMDM_MODE_THREAD                        0x00000002")
cpp_quote("#define WMDM_CONTENT_FILE                       0x00000004")
cpp_quote("#define WMDM_CONTENT_FOLDER                     0x00000008")
cpp_quote("#define WMDM_CONTENT_OPERATIONINTERFACE         0x00000010")
cpp_quote("#define WMDM_MODE_QUERY                         0x00000020")
cpp_quote("#define WMDM_MODE_PROGRESS                      0x00000040")
cpp_quote("#define WMDM_MODE_TRANSFER_PROTECTED            0x00000080")
cpp_quote("#define WMDM_MODE_TRANSFER_UNPROTECTED          0x00000100")
cpp_quote("#define WMDM_STORAGECONTROL_INSERTBEFORE        0x00000200")
cpp_quote("#define WMDM_STORAGECONTROL_INSERTAFTER         0x00000400")
cpp_quote("#define WMDM_STORAGECONTROL_INSERTINTO          0x00000800")
cpp_quote("#define WMDM_MODE_RECURSIVE                     0x00001000")
//cpp_quote("#define WMDM_FILE_CREATE_OVERWRITE              0x00100000")

cpp_quote("// WMDM Rights Flags")
cpp_quote("// NON_SDMI = !SDMI_PROTECTED")
cpp_quote("// SDMI = SDMI_VALIDATED")
cpp_quote("#define WMDM_RIGHTS_PLAY_ON_PC                  0x00000001")
cpp_quote("#define WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE     0x00000002")
cpp_quote("#define WMDM_RIGHTS_COPY_TO_CD                  0x00000008")
cpp_quote("#define WMDM_RIGHTS_COPY_TO_SDMI_DEVICE         0x00000010")

cpp_quote("// WMDM Seek Flags")
cpp_quote("#define WMDM_SEEK_BEGIN                         0x00000001")
cpp_quote("#define WMDM_SEEK_CURRENT                       0x00000002")
cpp_quote("#define WMDM_SEEK_END                           0x00000008")

cpp_quote("// WMDM Device Enumeration Flags")
cpp_quote("#define DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES   0x00000001")
cpp_quote("#define ALLOW_OUTOFBAND_NOTIFICATION            0x00000002")

enum WMDMMessage
{
    WMDM_MSG_DEVICE_ARRIVAL,
    WMDM_MSG_DEVICE_REMOVAL,
    WMDM_MSG_MEDIA_ARRIVAL,
    WMDM_MSG_MEDIA_REMOVAL
};

interface IWMDMStorage;
interface IWMDMStorage2;
interface IWMDMProgress;
interface IWMDMProgress2;
interface IWMDMProgress3;
interface IWMDMDevice;
interface IWMDMDevice2;
interface IWMDMEnumDevice;
interface IWMDMEnumStorage;
interface IWMDMRevoked;
interface IWMDMNotification;
interface IWMDMMetaData;

//
// IWMDMMetaData
//
[
    object,
    uuid(EC3B0663-0951-460a-9A80-0DCEED3C043C),
    pointer_default(unique)
]
interface IWMDMMetaData : IUnknown
{
	HRESULT AddItem([in] WMDM_TAG_DATATYPE Type, 
			[in, string] LPCWSTR pwszTagName, 
			[in, size_is(iLength), unique] BYTE *pValue, 
			[in] UINT iLength
		       );
		       
	HRESULT QueryByName([in, string] LPCWSTR     		pwszTagName, 
			    [out] WMDM_TAG_DATATYPE  	       	*pType, 
			    [out, size_is(,*pcbLength)] BYTE	**pValue, 
			    [out] UINT 		     		*pcbLength
			   );		

	HRESULT QueryByIndex([in] UINT 		     		iIndex, 	
			     [out, string] WCHAR 		**ppwszName,			     			     
			     [out] WMDM_TAG_DATATYPE  		*pType, 
			     [out, size_is(,*pcbLength)] BYTE 	**ppValue, 
			     [out] UINT 			*pcbLength
			    );	 
			       
	HRESULT GetItemCount([out] UINT *iCount);					 
};


// IWMDeviceManager
[
    object,
    uuid(1DCB3A00-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDeviceManager : IUnknown
{
    HRESULT GetRevision([out] DWORD *pdwRevision);
    HRESULT GetDeviceCount([out]DWORD *pdwCount);
    HRESULT EnumDevices([out] IWMDMEnumDevice **ppEnumDevice);
};

// IWMDeviceManager2
[
    object,
    uuid(923E5249-8731-4c5b-9B1C-B8B60B6E46AF),
    pointer_default(unique)
]
interface IWMDeviceManager2 : IWMDeviceManager
{
    HRESULT GetDeviceFromCanonicalName([in, string] LPCWSTR pwszCanonicalName, [out] IWMDMDevice** ppDevice );
    HRESULT EnumDevices2([out] IWMDMEnumDevice **ppEnumDevice);
    HRESULT Reinitialize();
}

// IWMDeviceManager
[
    object,
    uuid(af185c41-100d-46ed-be2e-9ce8c44594ef),
    pointer_default(unique)
]
interface IWMDeviceManager3 : IWMDeviceManager2
{
    HRESULT SetDeviceEnumPreference([in] DWORD dwEnumPref);
}

// IWMDMStorageGlobals
[
    object,
    uuid(1DCB3A07-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMStorageGlobals : IUnknown
{
    HRESULT GetCapabilities([out] DWORD *pdwCapabilities);
    HRESULT GetSerialNumber([out] PWMDMID pSerialNum,
                            [in, out] BYTE abMac[WMDM_MAC_LENGTH]);
    HRESULT GetTotalSize([out] DWORD *pdwTotalSizeLow,
                         [out] DWORD *pdwTotalSizeHigh);
    HRESULT GetTotalFree([out] DWORD *pdwFreeLow,
                         [out] DWORD *pdwFreeHigh);
    HRESULT GetTotalBad([out] DWORD *pdwBadLow,
                        [out] DWORD *pdwBadHigh);
    HRESULT GetStatus([out] DWORD *pdwStatus);
    HRESULT Initialize([in] UINT fuMode,
                       [in] IWMDMProgress *pProgress);
};

// IWMDMStorage
[
    object,
    uuid(1DCB3A06-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMStorage : IUnknown
{
    HRESULT SetAttributes([in] DWORD dwAttributes,
                          [in, unique] _WAVEFORMATEX *pFormat);
    HRESULT GetStorageGlobals([out]IWMDMStorageGlobals **ppStorageGlobals);
    HRESULT GetAttributes([out] DWORD *pdwAttributes,
                          [in, out, unique] _WAVEFORMATEX *pFormat);            //in attribute specified only to allow unique
    HRESULT GetName([out,string,size_is(nMaxChars)] LPWSTR pwszName,
                    [in] UINT nMaxChars);
    HRESULT GetDate([out] PWMDMDATETIME pDateTimeUTC);
    HRESULT GetSize([out] DWORD *pdwSizeLow,
                    [out] DWORD *pdwSizeHigh);
    HRESULT GetRights([out, size_is(, *pnRightsCount)] PWMDMRIGHTS *ppRights,
                      [out] UINT *pnRightsCount,
                      [in, out] BYTE abMac[WMDM_MAC_LENGTH]);
    HRESULT EnumStorage([out] IWMDMEnumStorage **pEnumStorage);
    HRESULT SendOpaqueCommand([in,out] OPAQUECOMMAND *pCommand);
};

// IWMDMStorage2
[
    object,
    uuid(1ED5A144-5CD5-4683-9EFF-72CBDB2D9533),
    pointer_default(unique)
]
interface IWMDMStorage2 : IWMDMStorage
{
    HRESULT GetStorage([in, string] LPCWSTR pszStorageName, [out] IWMDMStorage** ppStorage );
 
    HRESULT SetAttributes2( [in] DWORD dwAttributes, 
                            [in] DWORD dwAttributesEx, 
                            [in, unique] _WAVEFORMATEX *pFormat,
                            [in, unique] _VIDEOINFOHEADER* pVideoFormat );
    HRESULT GetAttributes2( [out] DWORD *pdwAttributes,
                            [out] DWORD *pdwAttributesEx,
                            [in, out, unique] _WAVEFORMATEX *pAudioFormat,      //in attribute specified only to allow unique
                            [in, out, unique] _VIDEOINFOHEADER* pVideoFormat ); //in attribute specified only to allow unique
};

// IWMDMStorage3
[
    object,
    uuid(97717EEA-926A-464e-96A4-247B0216026E),
    pointer_default(unique)
]
interface IWMDMStorage3 : IWMDMStorage2
{
    HRESULT GetMetadata([out] IWMDMMetaData **ppMetadata );
            
    HRESULT SetMetadata([in] IWMDMMetaData *pMetadata);
    
    HRESULT CreateEmptyMetadataObject([out] IWMDMMetaData **ppMetadata);

    HRESULT SetEnumPreference([in, out] WMDM_STORAGE_ENUM_MODE * pMode, [in] DWORD nViews, [in, size_is(nViews), unique] WMDMMetadataView * pViews);
};

// IWMDMStorage4
[
    object,
    uuid(c225bac5-a03a-40b8-9a23-91cf478c64a6),
    pointer_default(unique)
]
interface IWMDMStorage4 : IWMDMStorage3
{
    HRESULT SetReferences ([in] DWORD dwRefs, [in, size_is(dwRefs)] IWMDMStorage ** ppIWMDMStorage);
    HRESULT GetReferences ([out] DWORD * pdwRefs, [out, size_is(, *pdwRefs)] IWMDMStorage *** pppIWMDMStorage);

    HRESULT GetRightsWithProgress([in] IWMDMProgress3 * pIProgressCallback,
                      [out, size_is(, *pnRightsCount)] PWMDMRIGHTS *ppRights,
                      [out] UINT *pnRightsCount);

    HRESULT GetSpecifiedMetadata(   [in] DWORD cProperties,
                                    [in, size_is(cProperties)] LPCWSTR * ppwszPropNames,
                                    [out] IWMDMMetaData **ppMetadata );

    HRESULT FindStorage(    [in] WMDM_FIND_SCOPE findScope,
                            [in] LPCWSTR pwszUniqueID,
                            [out] IWMDMStorage ** ppStorage);
    
    HRESULT GetParent ([out] IWMDMStorage ** ppStorage);
};


// IWMDMOperation
[
    object,
    uuid(1DCB3A0B-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMOperation : IUnknown
{
    HRESULT BeginRead();
    HRESULT BeginWrite();
    HRESULT GetObjectName([out,string,size_is(nMaxChars)] LPWSTR pwszName,
                          [in] UINT nMaxChars);
    HRESULT SetObjectName([in,string,size_is(nMaxChars)] LPWSTR pwszName,
                          [in] UINT nMaxChars);
    HRESULT GetObjectAttributes([out] DWORD *pdwAttributes,
                                [in, out, unique] _WAVEFORMATEX *pFormat);  //in attribute specified only to allow unique
    HRESULT SetObjectAttributes([in] DWORD dwAttributes,
                                [in, unique] _WAVEFORMATEX *pFormat);
    HRESULT GetObjectTotalSize([out] DWORD *pdwSize,
                               [out] DWORD *pdwSizeHigh);
    HRESULT SetObjectTotalSize([in] DWORD dwSize,
                               [in] DWORD dwSizeHigh);
    HRESULT TransferObjectData([in,out,size_is(*pdwSize)] BYTE *pData,
                               [in,out] DWORD *pdwSize,
                               [in, out] BYTE abMac[WMDM_MAC_LENGTH]);
    HRESULT End([in] HRESULT *phCompletionCode,
                [in] IUnknown *pNewObject);
};


// IWMDMOperation2
[
    object,
    uuid(33445B48-7DF7-425c-AD8F-0FC6D82F9F75),   
    pointer_default(unique)
]
interface IWMDMOperation2 : IWMDMOperation
{
    HRESULT SetObjectAttributes2(   [in] DWORD dwAttributes, 
                                    [in] DWORD dwAttributesEx, 
                                    [in, unique] _WAVEFORMATEX *pFormat,
                                    [in, unique] _VIDEOINFOHEADER* pVideoFormat );
    HRESULT GetObjectAttributes2(   [out] DWORD *pdwAttributes,
                                    [out] DWORD *pdwAttributesEx,
                                    [in, out, unique] _WAVEFORMATEX *pAudioFormat,      //in attribute specified only to allow unique
                                    [in, out, unique] _VIDEOINFOHEADER* pVideoFormat ); //in attribute specified only to allow unique     
};

// IWMDMOperation3
[
    object,
    uuid(d1f9b46a-9ca8-46d8-9d0f-1ec9bae54919),
    pointer_default(unique)
]
interface IWMDMOperation3 : IWMDMOperation
{
    //
    // TransferObjectData without SAC
    //
    HRESULT TransferObjectDataOnClearChannel([in,out,size_is(*pdwSize)] BYTE *pData,
                               [in,out] DWORD *pdwSize);    
};

// IWMDMProgress
[
    object,
    uuid(1DCB3A0C-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMProgress : IUnknown
{
    HRESULT Begin([in] DWORD dwEstimatedTicks);
    HRESULT Progress([in] DWORD dwTranspiredTicks);
    HRESULT End();
};

// IWMDMProgress2
[
    object,
    uuid(3A43F550-B383-4e92-B04A-E6BBC660FEFC),
    pointer_default(unique)
]
interface IWMDMProgress2 : IWMDMProgress
{
    HRESULT End2([in] HRESULT hrCompletionCode );
};

// IWMDMProgress3
[
    object,
    uuid(21DE01CB-3BB4-4929-B21A-17AF3F80F658),
    pointer_default(unique)
]
interface IWMDMProgress3 : IWMDMProgress2
{
    HRESULT Begin3([in] GUID EventId, [in] DWORD dwEstimatedTicks, [in, out, unique] OPAQUECOMMAND * pContext);
    HRESULT Progress3([in] GUID EventId, [in] DWORD dwTranspiredTicks, [in, out, unique] OPAQUECOMMAND * pContext);
    HRESULT End3([in] GUID EventId, [in] HRESULT hrCompletionCode, [in, out, unique] OPAQUECOMMAND * pContext);
};


// IWMDMDevice
[
    object,
    uuid(1DCB3A02-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMDevice : IUnknown
{
    HRESULT GetName([out,string,size_is(nMaxChars)] LPWSTR pwszName,
                    [in] UINT nMaxChars);
    HRESULT GetManufacturer([out,string,size_is(nMaxChars)] LPWSTR pwszName,
                            [in] UINT nMaxChars);
    HRESULT GetVersion([out] DWORD *pdwVersion);
    HRESULT GetType([out] DWORD *pdwType);
    HRESULT GetSerialNumber([out] PWMDMID pSerialNumber,
                            [in, out] BYTE abMac[WMDM_MAC_LENGTH]); 
    HRESULT GetPowerSource([out] DWORD *pdwPowerSource,
                           [out] DWORD *pdwPercentRemaining);
    HRESULT GetStatus([out] DWORD *pdwStatus);
    HRESULT GetDeviceIcon([out] ULONG *hIcon);
    HRESULT EnumStorage([out] IWMDMEnumStorage **ppEnumStorage);
    HRESULT GetFormatSupport([out, size_is( , *pnFormatCount)] _WAVEFORMATEX **ppFormatEx,
                             [out] UINT *pnFormatCount,
                             [out, size_is( , *pnMimeTypeCount)] LPWSTR **pppwszMimeType,
                             [out] UINT *pnMimeTypeCount);
    HRESULT SendOpaqueCommand([in,out] OPAQUECOMMAND *pCommand);
};

// IWMDMDevice2
[
    object,
    uuid(E34F3D37-9D67-4fc1-9252-62D28B2F8B55),
    pointer_default(unique)
]
interface IWMDMDevice2 : IWMDMDevice
{
    HRESULT GetStorage([in, string] LPCWSTR pszStorageName, [out] IWMDMStorage** ppStorage );
 
    HRESULT GetFormatSupport2( 
            [in] DWORD dwFlags,
            [out, size_is( , *pnAudioFormatCount)] _WAVEFORMATEX** ppAudioFormatEx,
            [out, ref] UINT *pnAudioFormatCount,
            [out, size_is( , *pnVideoFormatCount)] _VIDEOINFOHEADER** ppVideoFormatEx,
            [out, ref] UINT *pnVideoFormatCount,
            [out, size_is( , *pnFileTypeCount)] WMFILECAPABILITIES** ppFileType,
            [out, ref] UINT* pnFileTypeCount);

    
    HRESULT GetSpecifyPropertyPages([out, ref] ISpecifyPropertyPages** ppSpecifyPropPages, 
                                    [out, ref, size_is(,*pcUnks)] IUnknown*** pppUnknowns, 
                                    [out, ref] ULONG* pcUnks );

    HRESULT GetCanonicalName([out, size_is(nMaxChars)] LPWSTR pwszPnPName,
                       [in] UINT nMaxChars );


};

///////////////////////////////////////////////////////////////////////////////////////
// IWMDMDevice3
[
    object,
    uuid(6c03e4fe-05db-4dda-9e3c-06233a6d5d65),
    pointer_default(unique)
]
interface IWMDMDevice3 : IWMDMDevice2
{
    //
    //Get/Set a device property
    //
    HRESULT GetProperty ([in] LPCWSTR pwszPropName, [out] PROPVARIANT * pValue);
    HRESULT SetProperty ([in] LPCWSTR pwszPropName, [in] const PROPVARIANT * pValue);

    //
    //Get capabilties of the device for a particular format
    //
    HRESULT GetFormatCapability([in] WMDM_FORMATCODE format, [out] WMDM_FORMAT_CAPABILITY * pFormatSupport);

    //
    //DeviceIoControl
    //
    HRESULT DeviceIoControl (   [in] DWORD   dwIoControlCode,
                                [in, size_is(nInBufferSize)] BYTE * lpInBuffer,
                                [in] DWORD   nInBufferSize,
                                [out, size_is(*pnOutBufferSize)] BYTE * lpOutBuffer,
                                [in, out] LPDWORD pnOutBufferSize);

    //
    //Find storage based on unique-id
    //
    HRESULT FindStorage(    [in] WMDM_FIND_SCOPE findScope,
                            [in] LPCWSTR pwszUniqueID,
                            [out] IWMDMStorage ** ppStorage);
};

// IWMDMDeviceSession
[
    object,
    uuid(82af0a65-9d96-412c-83e5-3c43e4b06cc7),
    pointer_default(unique)
]
interface IWMDMDeviceSession : IUnknown
{
    //
    // Indicates beginning of a transfer session
    // This can be used to optimize things that need to be done only once per transfer
    // session. This includes querying of device certificate and such
    //
    HRESULT BeginSession (  [in] WMDM_SESSION_TYPE type,
                            [in, size_is(dwSizeCtx), unique] BYTE * pCtx,   //unique is needed explicitly for allowing NULL,
                                                                            //even though pointer_default is unique
                            [in] DWORD dwSizeCtx);
    //
    // Indicates end of a transfer session
    //
    HRESULT EndSession (    [in] WMDM_SESSION_TYPE type,
                            [in, size_is(dwSizeCtx), unique] BYTE * pCtx,   //unique is needed explicitly for allowing NULL,
                                                                            //even though pointer_default is unique
                            [in] DWORD dwSizeCtx);
};

// IWMDMEnumDevice
[
    object,
    uuid(1DCB3A01-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMEnumDevice : IUnknown
{
    HRESULT Next([in]ULONG celt,
                 [out, size_is(celt), length_is(*pceltFetched)] IWMDMDevice **ppDevice,
                 [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt, [out] ULONG *pceltFetched);
    HRESULT Reset();
    HRESULT Clone([out] IWMDMEnumDevice **ppEnumDevice);
};


// IWMDMDeviceControl
[
    object,
    uuid(1DCB3A04-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMDeviceControl : IUnknown
{
    HRESULT GetStatus([out] DWORD *pdwStatus);
    HRESULT GetCapabilities([out] DWORD *pdwCapabilitiesMask);
    HRESULT Play();
    HRESULT Record([in] _WAVEFORMATEX *pFormat);
    HRESULT Pause();
    HRESULT Resume();
    HRESULT Stop();
    HRESULT Seek([in] UINT fuMode, [in] int nOffset);
};

// IWMDMEnumStorage
[
    object,
    uuid(1DCB3A05-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMEnumStorage : IUnknown
{
    HRESULT Next([in]ULONG celt,
                 [out, size_is(celt), length_is(*pceltFetched)] IWMDMStorage **ppStorage,
                 [out] ULONG *pceltFetched);
    HRESULT Skip([in] ULONG celt, [out] ULONG *pceltFetched);
    HRESULT Reset();
    HRESULT Clone([out] IWMDMEnumStorage **ppEnumStorage);
};

// IWMDMStorageControl
[
    object,
    uuid(1DCB3A08-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMStorageControl : IUnknown
{
    HRESULT Insert([in] UINT fuMode,
                   [in,unique] LPWSTR pwszFile,
                   [in] IWMDMOperation *pOperation,
                   [in] IWMDMProgress *pProgress,
                   [out] IWMDMStorage **ppNewObject);
    HRESULT Delete([in] UINT fuMode,
                   [in] IWMDMProgress *pProgress);
    HRESULT Rename([in] UINT fuMode,
                   [in] LPWSTR pwszNewName,
                   [in] IWMDMProgress *pProgress);
    HRESULT Read([in] UINT fuMode,
                 [in,unique] LPWSTR pwszFile,
                 [in] IWMDMProgress *pProgress,
                 [in] IWMDMOperation *pOperation);
    HRESULT Move([in] UINT fuMode,
                 [in] IWMDMStorage *pTargetObject,
                 [in] IWMDMProgress *pProgress);
};


// IWMDMStorageControl2
[
    object,
    uuid(972C2E88-BD6C-4125-8E09-84F837E637B6),
    pointer_default(unique)
]
interface IWMDMStorageControl2 : IWMDMStorageControl
{
    HRESULT Insert2([in] UINT fuMode,
                    [in,unique, string] LPWSTR pwszFileSource,
                    [in,unique, string] LPWSTR pwszFileDest,
                    [in] IWMDMOperation *pOperation,
                    [in] IWMDMProgress *pProgress,
                    [in] IUnknown* pUnknown,
                    [in,out,unique] IWMDMStorage **ppNewObject);
};





//
// IWMDMStorageControl3
//
[
    object,
    uuid(B3266365-D4F3-4696-8D53-BD27EC60993A),
    pointer_default(unique)
]
interface IWMDMStorageControl3 : IWMDMStorageControl2
{
    HRESULT Insert3([in] UINT fuMode,
                    [in] UINT fuType,
                    [in, unique, string] LPWSTR pwszFileSource,
                    [in, unique, string] LPWSTR pwszFileDest,
                    [in] IWMDMOperation *pOperation,
                    [in] IWMDMProgress *pProgress,  
                    [in] IWMDMMetaData  *pMetaData,
                    [in] IUnknown* pUnknown,
                    [out] IWMDMStorage **ppNewObject); 
};

// IWMDMObjectInfo
[
    object,
    uuid(1DCB3A09-33ED-11d3-8470-00C04F79DBC0),
    pointer_default(unique)
]
interface IWMDMObjectInfo : IUnknown
{
    HRESULT GetPlayLength([out] DWORD *pdwLength);
    HRESULT SetPlayLength([in] DWORD dwLength);
    HRESULT GetPlayOffset([out] DWORD *pdwOffset);
    HRESULT SetPlayOffset([in] DWORD dwOffset);
    HRESULT GetTotalLength([out] DWORD *pdwLength);
    HRESULT GetLastPlayPosition([out] DWORD *pdwLastPos);
    HRESULT GetLongestPlayPosition([out] DWORD *pdwLongestPos);
};

// IWMDMRevoked
[
    object,
    uuid(EBECCEDB-88EE-4e55-B6A4-8D9F07D696AA),
    pointer_default(ref)
]
interface IWMDMRevoked : IUnknown
{
    HRESULT GetRevocationURL( [in,out, string, size_is(, *pdwBufferLen)] LPWSTR* ppwszRevocationURL,
                              [in,out] DWORD*  pdwBufferLen,
                              [out] DWORD* pdwRevokedBitFlag );
};

////////////////////////////////////////////////////////////////////////
//Outgoing interface(s)
////////////////////////////////////////////////////////////////////////
// IWMDMNotification
[
    object,
    uuid(3F5E95C0-0F43-4ed4-93D2-C89A45D59B81),
    pointer_default(unique)
]
interface IWMDMNotification : IUnknown
{
    HRESULT WMDMMessage ([in] DWORD dwMessageType, [in, string] LPCWSTR pwszCanonicalName);
};

cpp_quote("// WMDM constants for wellknown meta-data tags")


// -------------------------------------------------------------------------------------------- 
//
// WMDM PROPERTIES
// 
// NOTE: As properties are defined, also add the strings to the WMDMDetermineMaxPropStringLen union below.
// 
// --------------------------------------------------------------------------------------------


//
// Basic properties
//

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMFileName = L\"WMDM/FileName\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" )  
cpp_quote( "static const WCHAR *g_wszWMDMFormatCode = L\"WMDM/FormatCode\";" ) // Assigned WMDM_FORMATCODE enum values

cpp_quote( "//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME" ) 
cpp_quote( "static const WCHAR *g_wszWMDMLastModifiedDate = L\"WMDM/LastModifiedDate\";" )

cpp_quote( "//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME" ) 
cpp_quote( "static const WCHAR *g_wszWMDMFileCreationDate = L\"WMDM/FileCreationDate\";" )

cpp_quote( "//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMFileSize = L\"WMDM/FileSize\";" )

cpp_quote( "//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMFileAttributes = L\"WMDM/FileAttributes\";" )

//
// General media properties
//

cpp_quote( "//Format code: WAVE Format" ) 
cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszAudioWAVECodec = L\"WMDM/AudioWAVECodec\";" )

cpp_quote( "//Format code: FOURCC code " ) 
cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszVideoFourCCCodec = L\"WMDM/VideoFourCCCodec\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMTitle = L\"WMDM/Title\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAuthor = L\"WMDM/Author\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDescription = L\"WMDM/Description\";" )

cpp_quote( "//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL" ) 
cpp_quote( "static const WCHAR *g_wszWMDMIsProtected = L\"WMDM/IsProtected\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumTitle = L\"WMDM/AlbumTitle\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumArtist = L\"WMDM/AlbumArtist\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMTrack = L\"WMDM/Track\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMGenre = L\"WMDM/Genre\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMTrackMood = L\"WMDM/TrackMood\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumCoverFormat = L\"WMDM/AlbumCoverFormat\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumCoverSize = L\"WMDM/AlbumCoverSize\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumCoverHeight = L\"WMDM/AlbumCoverHeight\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumCoverWidth = L\"WMDM/AlbumCoverWidth\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumCoverDuration = L\"WMDM/AlbumCoverDuration\";" )

cpp_quote( "//Type: BYTE*, WMDM_TAG_DATATYPE: WMDM_TYPE_BINARY" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumCoverData = L\"WMDM/AlbumCoverData\";" )

//
//For compatibility reasons it is kept as string - WM library uses string
//
cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMYear = L\"WMDM/Year\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMComposer = L\"WMDM/Composer\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMCodec = L\"WMDM/Codec\";" )

//??
cpp_quote( "static const WCHAR *g_wszWMDMDRMId = L\"WMDM/DRMId\";" )

//
//Audio format info
//
cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMBitrate = L\"WMDM/Bitrate\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMBitRateType = L\"WMDM/BitRateType\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSampleRate = L\"WMDM/SampleRate\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMNumChannels = L\"WMDM/NumChannels\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMBlockAlignment = L\"WMDM/BlockAlignment\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAudioBitDepth = L\"WMDM/AudioBitDepth\";" ) 

//
//Video format info (picture format info is a subset of video format info)
//
cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMTotalBitrate = L\"WMDM/TotalBitrate\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMVideoBitrate = L\"WMDM/VideoBitrate\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMFrameRate = L\"WMDM/FrameRate\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMScanType = L\"WMDM/ScanType\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMKeyFrameDistance = L\"WMDM/KeyFrameDistance\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMBufferSize = L\"WMDM/BufferSize\";" ) 

cpp_quote( "//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMQualitySetting = L\"WMDM/QualitySetting\";" ) 

///////////////////////////

cpp_quote( "//Type: QWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_QWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDuration = L\"WMDM/Duration\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAlbumArt = L\"WMDM/AlbumArt\";" ) 

cpp_quote( "//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL" ) 
cpp_quote( "static const WCHAR *g_wszWMDMBuyNow = L\"WMDM/BuyNow\";" )

cpp_quote( "//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL" ) 
cpp_quote( "static const WCHAR *g_wszWMDMNonConsumable = L\"WMDM/NonConsumable\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMediaClassPrimaryID = L\"WMDM/MediaClassPrimaryID\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMMediaClassSecondaryID = L\"WMDM/MediaClassSecondaryID\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMUserEffectiveRating = L\"WMDM/UserEffectiveRating\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMUserRating = L\"WMDM/UserRating\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMUserRatingOnDevice = L\"WMDM/UserRatingOnDevice\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMPlayCount = L\"WMDM/PlayCount\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDevicePlayCount = L\"WMDM/DevicePlayCount\";" ) 

cpp_quote( "//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME" ) 
cpp_quote( "static const WCHAR *g_wszWMDMAuthorDate = L\"WMDM/AuthorDate\";" ) 

cpp_quote( "//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME" ) 
cpp_quote( "static const WCHAR *g_wszWMDMUserLastPlayTime = L\"WMDM/UserLastPlayTime\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSubTitle = L\"WMDM/SubTitle\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSubTitleDescription = L\"WMDM/SubTitleDescription\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMMediaCredits = L\"WMDM/MediaCredits\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMMediaStationName = L\"WMDM/MediaStationName\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMMediaOriginalChannel = L\"WMDM/MediaOriginalChannel\";" ) 

cpp_quote( "//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME" ) 
cpp_quote( "static const WCHAR *g_wszWMDMMediaOriginalBroadcastDateTime = L\"WMDM/MediaOriginalBroadcastDateTime\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMProviderCopyright = L\"WMDM/ProviderCopyright\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSyncID = L\"WMDM/SyncID\";" ) 

cpp_quote( "//Type: GUID, WMDM_TAG_DATATYPE: WMDM_TYPE_GUID" ) 
cpp_quote( "static const WCHAR *g_wszWMDMPersistentUniqueID = L\"WMDM/PersistentUniqueID\";" )

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMWidth = L\"WMDM/Width\";" ) 

cpp_quote( "//Type: DWORD, WMDM_TAG_DATATYPE: WMDM_TYPE_DWORD" ) 
cpp_quote( "static const WCHAR *g_wszWMDMHeight = L\"WMDM/Height\";" ) 

cpp_quote( "//Type: WMDMDATETIME, WMDM_TAG_DATATYPE: WMDM_TYPE_DATETIME" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSyncTime = L\"WMDM/SyncTime\";" ) 

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMParentalRating = L\"WMDM/ParentalRating\";" )

cpp_quote( "//Type: LPCWSTR, WMDM_TAG_DATATYPE: WMDM_TYPE_STRING" ) 
cpp_quote( "static const WCHAR *g_wszWMDMMetaGenre = L\"WMDM/MetaGenre\";" )

cpp_quote( "//Type: BOOL, WMDM_TAG_DATATYPE: WMDM_TYPE_BOOL" ) 
cpp_quote( "static const WCHAR *g_wszWMDMIsRepeat = L\"WMDM/IsRepeat\";" )

//
//Device properties
//
cpp_quote("// Device properties")

cpp_quote( "//PROPVARIANT vt = VT_BSTR | VT_ARRAY" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSupportedDeviceProperties = L\"WMDM/SupportedDeviceProperties\";" )

cpp_quote( "//PROPVARIANT vt = VT_BSTR" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDeviceFriendlyName = L\"WMDM/DeviceFriendlyName\";" )

cpp_quote( "//PROPVARIANT vt = VT_UI4 | VT_ARRAY" ) 
cpp_quote( "static const WCHAR *g_wszWMDMFormatsSupported = L\"WMDM/FormatsSupported\";" )

cpp_quote( "//PROPVARIANT vt = VT_UI4" ) 
cpp_quote( "static const WCHAR *g_wszWMDMSyncRelationshipID = L\"WMDM/SyncRelationshipID\";" )

cpp_quote( "//PROPVARIANT vt = VT_BSTR" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDeviceModelName = L\"WMDM/DeviceModelName\";" )

cpp_quote( "//PROPVARIANT vt = VT_BSTR" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDeviceFirmwareVersion = L\"WMDM/DeviceFirmwareVersion\";" )

cpp_quote( "//PROPVARIANT vt = VT_BSTR" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDeviceVendorExtension = L\"WMDM/DeviceVendorExtension\";" )

cpp_quote( "//PROPVARIANT vt = VT_CLSID" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDeviceProtocol = L\"WMDM/DeviceProtocol\";" )

cpp_quote( "//PROPVARIANT vt = VT_CLSID" ) 
cpp_quote( "static const WCHAR *g_wszWMDMDeviceServiceProviderVendor = L\"WMDM/DeviceServiceProviderVendor\";" )

//
// This keeps track of the maximum property string character length. Add strings for any newly defined properties here.
// 

cpp_quote( "#define CCH_WMDM_PROPNAME(sz) (sizeof(sz)/sizeof(sz[0]))" )
cpp_quote( "union WMDMDetermineMaxPropStringLen {" )
cpp_quote( "WCHAR sz001[CCH_WMDM_PROPNAME(L\"WMDM/DeviceFirmwareVersion\")];" )
cpp_quote( "WCHAR sz002[CCH_WMDM_PROPNAME(L\"WMDM/SupportedDeviceProperties\")];" )
cpp_quote( "WCHAR sz003[CCH_WMDM_PROPNAME(L\"WMDM/FileName\")];" ) 
cpp_quote( "WCHAR sz004[CCH_WMDM_PROPNAME(L\"WMDM/FormatCode\")];" )
cpp_quote( "WCHAR sz005[CCH_WMDM_PROPNAME(L\"WMDM/LastModifiedDate\")];" )
cpp_quote( "WCHAR sz006[CCH_WMDM_PROPNAME(L\"WMDM/FileSize\")];" )
cpp_quote( "WCHAR sz007[CCH_WMDM_PROPNAME(L\"WMDM/FileAttributes\")];" )
cpp_quote( "WCHAR sz008[CCH_WMDM_PROPNAME(L\"WMDM/AudioWAVECodec\")];" )
cpp_quote( "WCHAR sz009[CCH_WMDM_PROPNAME(L\"WMDM/VideoFourCCCodec\")];" )
cpp_quote( "WCHAR sz010[CCH_WMDM_PROPNAME(L\"WMDM/Title\")];" )
cpp_quote( "WCHAR sz011[CCH_WMDM_PROPNAME(L\"WMDM/Author\")];" )
cpp_quote( "WCHAR sz012[CCH_WMDM_PROPNAME(L\"WMDM/Description\")];" )
cpp_quote( "WCHAR sz013[CCH_WMDM_PROPNAME(L\"WMDM/IsProtected\")];" )
cpp_quote( "WCHAR sz014[CCH_WMDM_PROPNAME(L\"WMDM/AlbumTitle\")];" )
cpp_quote( "WCHAR sz015[CCH_WMDM_PROPNAME(L\"WMDM/AlbumArtist\")];" )
cpp_quote( "WCHAR sz016[CCH_WMDM_PROPNAME(L\"WMDM/Track\")];" )
cpp_quote( "WCHAR sz017[CCH_WMDM_PROPNAME(L\"WMDM/Genre\")];" )
cpp_quote( "WCHAR sz018[CCH_WMDM_PROPNAME(L\"WMDM/TrackMood\")];" )
cpp_quote( "WCHAR sz019[CCH_WMDM_PROPNAME(L\"WMDM/AlbumCoverFormat\")];" )
cpp_quote( "WCHAR sz020[CCH_WMDM_PROPNAME(L\"WMDM/AlbumCoverSize\")];" )
cpp_quote( "WCHAR sz021[CCH_WMDM_PROPNAME(L\"WMDM/AlbumCoverHeight\")];" )
cpp_quote( "WCHAR sz022[CCH_WMDM_PROPNAME(L\"WMDM/AlbumCoverWidth\")];" )
cpp_quote( "WCHAR sz023[CCH_WMDM_PROPNAME(L\"WMDM/AlbumCoverDuration\")];" )
cpp_quote( "WCHAR sz024[CCH_WMDM_PROPNAME(L\"WMDM/AlbumCoverData\")];" )
cpp_quote( "WCHAR sz025[CCH_WMDM_PROPNAME(L\"WMDM/Year\")];" )
cpp_quote( "WCHAR sz026[CCH_WMDM_PROPNAME(L\"WMDM/Composer\")];" )
cpp_quote( "WCHAR sz027[CCH_WMDM_PROPNAME(L\"WMDM/Codec\")];" )
cpp_quote( "WCHAR sz028[CCH_WMDM_PROPNAME(L\"WMDM/DRMId\")];" )
cpp_quote( "WCHAR sz029[CCH_WMDM_PROPNAME(L\"WMDM/Bitrate\")];" ) 
cpp_quote( "WCHAR sz030[CCH_WMDM_PROPNAME(L\"WMDM/BitRateType\")];" ) 
cpp_quote( "WCHAR sz031[CCH_WMDM_PROPNAME(L\"WMDM/SampleRate\")];" ) 
cpp_quote( "WCHAR sz032[CCH_WMDM_PROPNAME(L\"WMDM/NumChannels\")];" ) 
cpp_quote( "WCHAR sz033[CCH_WMDM_PROPNAME(L\"WMDM/BlockAlignment\")];" ) 
cpp_quote( "WCHAR sz034[CCH_WMDM_PROPNAME(L\"WMDM/AudioBitDepth\")];" ) 
cpp_quote( "WCHAR sz035[CCH_WMDM_PROPNAME(L\"WMDM/TotalBitrate\")];" ) 
cpp_quote( "WCHAR sz036[CCH_WMDM_PROPNAME(L\"WMDM/VideoBitrate\")];" ) 
cpp_quote( "WCHAR sz037[CCH_WMDM_PROPNAME(L\"WMDM/FrameRate\")];" ) 
cpp_quote( "WCHAR sz041[CCH_WMDM_PROPNAME(L\"WMDM/ScanType\")];" ) 
cpp_quote( "WCHAR sz043[CCH_WMDM_PROPNAME(L\"WMDM/KeyFrameDistance\")];" ) 
cpp_quote( "WCHAR sz044[CCH_WMDM_PROPNAME(L\"WMDM/BufferSize\")];" ) 
cpp_quote( "WCHAR sz045[CCH_WMDM_PROPNAME(L\"WMDM/QualitySetting\")];" ) 
cpp_quote( "WCHAR sz046[CCH_WMDM_PROPNAME(L\"WMDM/Duration\")];" ) 
cpp_quote( "WCHAR sz047[CCH_WMDM_PROPNAME(L\"WMDM/AlbumArt\")];" ) 
cpp_quote( "WCHAR sz048[CCH_WMDM_PROPNAME(L\"WMDM/BuyNow\")];" )
cpp_quote( "WCHAR sz049[CCH_WMDM_PROPNAME(L\"WMDM/MediaClassPrimaryID\")];" ) 
cpp_quote( "WCHAR sz050[CCH_WMDM_PROPNAME(L\"WMDM/MediaClassSecondayID\")];" ) 
cpp_quote( "WCHAR sz051[CCH_WMDM_PROPNAME(L\"WMDM/UserEffectiveRating\")];" ) 
cpp_quote( "WCHAR sz052[CCH_WMDM_PROPNAME(L\"WMDM/UserRating\")];" ) 
cpp_quote( "WCHAR sz053[CCH_WMDM_PROPNAME(L\"WMDM/UserRatingOnDevice\")];" ) 
cpp_quote( "WCHAR sz054[CCH_WMDM_PROPNAME(L\"WMDM/PlayCount\")];" ) 
cpp_quote( "WCHAR sz055[CCH_WMDM_PROPNAME(L\"WMDM/DevicePlayCount\")];" ) 
cpp_quote( "WCHAR sz056[CCH_WMDM_PROPNAME(L\"WMDM/AuthorDate\")];" ) 
cpp_quote( "WCHAR sz057[CCH_WMDM_PROPNAME(L\"WMDM/UserLastPlayTime\")];" ) 
cpp_quote( "WCHAR sz058[CCH_WMDM_PROPNAME(L\"WMDM/SubTitle\")];" ) 
cpp_quote( "WCHAR sz059[CCH_WMDM_PROPNAME(L\"WMDM/SubTitleDescription\")];" ) 
cpp_quote( "WCHAR sz060[CCH_WMDM_PROPNAME(L\"WMDM/MediaCredits\")];" ) 
cpp_quote( "WCHAR sz061[CCH_WMDM_PROPNAME(L\"WMDM/MediaStationName\")];" ) 
cpp_quote( "WCHAR sz062[CCH_WMDM_PROPNAME(L\"WMDM/MediaOriginalChannel\")];" ) 
cpp_quote( "WCHAR sz063[CCH_WMDM_PROPNAME(L\"WMDM/MediaOriginalBroadcastDateTime\")];" ) 
cpp_quote( "WCHAR sz064[CCH_WMDM_PROPNAME(L\"WMDM/ProviderCopyright\")];" ) 
cpp_quote( "WCHAR sz065[CCH_WMDM_PROPNAME(L\"WMDM/SyncID\")];" ) 
cpp_quote( "WCHAR sz066[CCH_WMDM_PROPNAME(L\"WMDM/PersistentUniqueID\")];" )
cpp_quote( "WCHAR sz067[CCH_WMDM_PROPNAME(L\"WMDM/Width\")];" ) 
cpp_quote( "WCHAR sz068[CCH_WMDM_PROPNAME(L\"WMDM/Height\")];" ) 
cpp_quote( "WCHAR sz069[CCH_WMDM_PROPNAME(L\"WMDM/SyncTime\")];" ) 
cpp_quote( "WCHAR sz070[CCH_WMDM_PROPNAME(L\"WMDM/ParentalRating\")];" )
cpp_quote( "WCHAR sz071[CCH_WMDM_PROPNAME(L\"WMDM/MetaGenre\")];" )
cpp_quote( "WCHAR sz072[CCH_WMDM_PROPNAME(L\"WMDM/IsRepeat\")];" )
cpp_quote( "WCHAR sz073[CCH_WMDM_PROPNAME(L\"WMDM/SupportedDeviceProperties\")];" )
cpp_quote( "WCHAR sz074[CCH_WMDM_PROPNAME(L\"WMDM/DeviceFriendlyName\")];" )
cpp_quote( "WCHAR sz075[CCH_WMDM_PROPNAME(L\"WMDM/FormatsSupported\")];" )
cpp_quote( "WCHAR sz076[CCH_WMDM_PROPNAME(L\"WMDM/SyncRelationshipID\")];" )
cpp_quote( "WCHAR sz077[CCH_WMDM_PROPNAME(L\"WMDM/DeviceModelName\")];" )
cpp_quote( "WCHAR sz078[CCH_WMDM_PROPNAME(L\"WMDM/DeviceFirmwareVersion\")];" )
cpp_quote( "WCHAR sz079[CCH_WMDM_PROPNAME(L\"WMDM/DeviceVendorExtension\")];" )
cpp_quote( "WCHAR sz080[CCH_WMDM_PROPNAME(L\"WMDM/DeviceProtocol\")];" )
cpp_quote( "WCHAR sz081[CCH_WMDM_PROPNAME(L\"WMDM/DeviceServiceProviderVendor\")];" )
cpp_quote( "};" )
cpp_quote( "#define WMDM_MAXLEN_PROPERTYNAME (sizeof(WMDMDetermineMaxPropStringLen)/sizeof(WCHAR))" )
